const fs = require('fs');
const path = require('path');

console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ Home & Settings —Å–∏—Å—Ç–µ–º—ã...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≥–ª–∞–≤–Ω–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
const homeFiles = [
  'src/lib/settings/types.ts',
  'src/lib/settings/schema.ts',
  'src/lib/settings/api.ts',
  'src/lib/settings/useSettings.ts',
  'src/components/home/HomeHeader.tsx',
  'src/components/home/Tile.tsx',
  'src/components/settings/SettingsList.tsx',
  'src/app/settings/page.tsx',
  'src/app/settings/profile/page.tsx',
  'src/app/settings/addresses/page.tsx',
  'src/app/settings/city/page.tsx',
  'src/app/settings/shipping/page.tsx',
  'src/app/settings/receipt/page.tsx'
];

let allFilesExist = true;
homeFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    allFilesExist = false;
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏—á–µ-—Ñ–ª–∞–≥–∏
const flagsPath = path.join(__dirname, 'src/lib/flags.ts');
if (fs.existsSync(flagsPath)) {
  const flagsContent = fs.readFileSync(flagsPath, 'utf8');
  
  const checks = [
    { name: 'HOME_V1_ENABLED —Ñ–ª–∞–≥', pattern: /HOME_V1_ENABLED.*=.*true/ },
    { name: 'SETTINGS_V1_ENABLED —Ñ–ª–∞–≥', pattern: /SETTINGS_V1_ENABLED.*=.*true/ },
  ];

  console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—á–µ-—Ñ–ª–∞–≥–æ–≤:');
  checks.forEach(check => {
    if (check.pattern.test(flagsContent)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ùå ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù`);
      allFilesExist = false;
    }
  });
} else {
  console.log('‚ùå flags.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
const homePagePath = path.join(__dirname, 'src/app/page.tsx');
if (fs.existsSync(homePagePath)) {
  const content = fs.readFileSync(homePagePath, 'utf8');

  const checks = [
    { name: 'HOME_V1_ENABLED –∏–º–ø–æ—Ä—Ç', pattern: /HOME_V1_ENABLED/ },
    { name: 'HomeHeader –∏–º–ø–æ—Ä—Ç', pattern: /import.*HomeHeader/ },
    { name: 'Tile –∏–º–ø–æ—Ä—Ç', pattern: /import.*Tile/ },
    { name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', pattern: /HomeHeader/ },
  ];

  console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
  checks.forEach(check => {
    if (check.pattern.test(content)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ùå ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù`);
      allFilesExist = false;
    }
  });
} else {
  console.log('‚ùå page.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allFilesExist = false;
}

if (allFilesExist) {
  console.log('\n‚ú® Home & Settings —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó!');
  console.log('üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
  console.log('  ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–ª–∏—Ç–∫–∞–º–∏');
  console.log('  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–∫–ª–∞–¥–æ–≤');
  console.log('  ‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ ACL');
  console.log('  ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º');
  console.log('  ‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–π UX');
} else {
  console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Home & Settings —Å–∏—Å—Ç–µ–º—ã.');
}
