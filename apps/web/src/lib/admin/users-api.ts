// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏

export interface User {
  id: string;
  email: string;
  password?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
  role: 'SUPER_ADMIN' | 'ADMIN' | 'USER';
  status: 'active' | 'inactive' | 'suspended';
  createdAt: string;
  lastLogin: string;
  parentAdminId?: string;
  parentAdmin?: {
    id: string;
    email: string;
  };
  children?: User[];
  permissions: string[];
  metadata: {
    loginCount: number;
    lastActivity: string;
    ipAddress: string;
    userAgent: string;
  };
}

export interface CreateUserRequest {
  email: string;
  role: 'ADMIN' | 'USER';
  parentAdminId?: string;
  permissions: string[];
}

export interface UpdateUserRequest {
  email?: string;
  role?: 'SUPER_ADMIN' | 'ADMIN' | 'USER';
  status?: 'active' | 'inactive' | 'suspended';
  permissions?: string[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
const loadUsersFromStorage = (): User[] => {
  if (typeof window === 'undefined') return [];
  
  try {
    const stored = localStorage.getItem('mockUsers');
    if (stored) {
      const parsed = JSON.parse(stored);
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ localStorage:', parsed.length);
      return parsed;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
  }
  return [];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
const saveUsersToStorage = (users: User[]) => {
  if (typeof window === 'undefined') return;
  
  try {
    localStorage.setItem('mockUsers', JSON.stringify(users));
    console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', users.length);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
  }
};

// –ò—Å—Ö–æ–¥–Ω—ã–µ mock –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const initialMockUsers: User[] = [
  {
    id: 'user-1',
    email: 'vegalav0202@gmail.com',
    role: 'SUPER_ADMIN',
    status: 'active',
    createdAt: '2024-01-15T10:00:00Z',
    lastLogin: '2024-01-20T14:30:00Z',
    permissions: ['*'],
    metadata: {
      loginCount: 156,
      lastActivity: '2024-01-20T14:30:00Z',
      ipAddress: '192.168.1.100',
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
  },
  {
    id: 'user-2',
    email: 'admin@example.com',
    role: 'ADMIN',
    status: 'active',
    createdAt: '2024-01-16T09:00:00Z',
    lastLogin: '2024-01-20T12:15:00Z',
    permissions: ['shipment:manage', 'user:view', 'finance:view'],
    metadata: {
      loginCount: 89,
      lastActivity: '2024-01-20T12:15:00Z',
      ipAddress: '192.168.1.101',
      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
    }
  },
  {
    id: 'user-3',
    email: 'user@example.com',
    role: 'USER',
    status: 'active',
    createdAt: '2024-01-17T11:00:00Z',
    lastLogin: '2024-01-20T08:45:00Z',
    parentAdminId: 'user-2',
    parentAdmin: {
      id: 'user-2',
      email: 'admin@example.com'
    },
    permissions: ['shipment:view', 'request:create'],
    metadata: {
      loginCount: 23,
      lastActivity: '2024-01-20T08:45:00Z',
      ipAddress: '192.168.1.102',
      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15'
    }
  },
  {
    id: 'user-4',
    email: 'manager@company.com',
    role: 'ADMIN',
    status: 'inactive',
    createdAt: '2024-01-18T13:00:00Z',
    lastLogin: '2024-01-19T16:20:00Z',
    permissions: ['shipment:manage', 'user:view'],
    metadata: {
      loginCount: 45,
      lastActivity: '2024-01-19T16:20:00Z',
      ipAddress: '192.168.1.103',
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
  },
  {
    id: 'user-5',
    email: 'client@business.com',
    role: 'USER',
    status: 'suspended',
    createdAt: '2024-01-19T15:00:00Z',
    lastLogin: '2024-01-19T17:30:00Z',
    parentAdminId: 'user-2',
    parentAdmin: {
      id: 'user-2',
      email: 'admin@example.com'
    },
    permissions: ['shipment:view'],
    metadata: {
      loginCount: 12,
      lastActivity: '2024-01-19T17:30:00Z',
      ipAddress: '192.168.1.104',
      userAgent: 'Mozilla/5.0 (Android 13; Mobile; rv:109.0) Gecko/109.0 Firefox/109.0'
    }
  },
  {
    id: 'user-6',
    email: 'vegalav08@gmail.com',
    password: '1688Andrey',
    role: 'ADMIN',
    status: 'active',
    createdAt: '2024-01-20T10:00:00Z',
    lastLogin: '2024-01-20T15:30:00Z',
    permissions: ['shipment:manage', 'user:view', 'finance:view', 'admin:access'],
    metadata: {
      loginCount: 25,
      lastActivity: '2024-01-20T15:30:00Z',
      ipAddress: '192.168.1.106',
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
  }
];

// Mock –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let mockUsers: User[] = [...initialMockUsers];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
const initializeClientData = () => {
  if (typeof window === 'undefined') return;
  
  const storedUsers = loadUsersFromStorage();
  if (storedUsers.length > 0) {
    mockUsers = storedUsers;
    console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ localStorage:', mockUsers.length);
  } else {
    saveUsersToStorage(mockUsers);
    console.log('üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage');
  }
};

// –§—É–Ω–∫—Ü–∏–∏ API
export const usersApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUsers(): Promise<User[]> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
    await new Promise(resolve => setTimeout(resolve, 500));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    initializeClientData();

    console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${mockUsers.length}`);
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`, mockUsers.map(u => ({ id: u.id, email: u.email, status: u.status, role: u.role })));

    return [...mockUsers];
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  async getUserById(id: string): Promise<User | null> {
    await new Promise(resolve => setTimeout(resolve, 300));
    return mockUsers.find(user => user.id === id) || null;
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createUser(userData: CreateUserRequest): Promise<User> {
    await new Promise(resolve => setTimeout(resolve, 800));
    
    const newUser: User = {
      id: `user-${Date.now()}`,
      email: userData.email,
      role: userData.role,
      status: 'active',
      createdAt: new Date().toISOString(),
      lastLogin: new Date().toISOString(),
      parentAdminId: userData.parentAdminId,
      permissions: userData.permissions || [],
      metadata: {
        loginCount: 0,
        lastActivity: new Date().toISOString(),
        ipAddress: '192.168.1.1',
        userAgent: 'System Generated'
      }
    };

    mockUsers.push(newUser);
    saveUsersToStorage(mockUsers);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUser.email} (ID: ${newUser.id}) —Å —Ä–æ–ª—å—é: ${newUser.role}`);
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${mockUsers.length}`);
    console.log(`üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, mockUsers.map(u => ({ id: u.id, email: u.email, role: u.role, status: u.status })));
    
    return newUser;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUser(id: string, userData: UpdateUserRequest): Promise<User> {
    await new Promise(resolve => setTimeout(resolve, 600));
    
    const userIndex = mockUsers.findIndex(user => user.id === id);
    if (userIndex === -1) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const updatedUser = {
      ...mockUsers[userIndex],
      ...userData,
      metadata: {
        ...mockUsers[userIndex].metadata,
        lastActivity: new Date().toISOString()
      }
    };

    mockUsers[userIndex] = updatedUser;
    saveUsersToStorage(mockUsers);
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser.email, '—Ä–æ–ª—å:', updatedUser.role, '—Å—Ç–∞—Ç—É—Å:', updatedUser.status);
    return updatedUser;
  },

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(id: string): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 400));
    
    const userIndex = mockUsers.findIndex(user => user.id === id);
    if (userIndex === -1) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const deletedUser = mockUsers[userIndex];
    mockUsers.splice(userIndex, 1);
    saveUsersToStorage(mockUsers);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: ${deletedUser.email} (ID: ${deletedUser.id})`);
    console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${mockUsers.length}`);
    
    return true;
  },

  // –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async changeUserStatus(id: string, status: 'active' | 'inactive' | 'suspended'): Promise<User> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const userIndex = mockUsers.findIndex(user => user.id === id);
    if (userIndex === -1) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    mockUsers[userIndex].status = status;
    mockUsers[userIndex].metadata.lastActivity = new Date().toISOString();
    saveUsersToStorage(mockUsers);
    
    return mockUsers[userIndex];
  },

  // –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async resetUserPassword(id: string): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const userIndex = mockUsers.findIndex(user => user.id === id);
    if (userIndex === -1) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ email —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
    console.log(`Password reset for user ${id}`);
    return true;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUserStats(): Promise<{
    total: number;
    active: number;
    inactive: number;
    suspended: number;
    byRole: {
      SUPER_ADMIN: number;
      ADMIN: number;
      USER: number;
    };
  }> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const total = mockUsers.length;
    const active = mockUsers.filter(user => user.status === 'active').length;
    const inactive = mockUsers.filter(user => user.status === 'inactive').length;
    const suspended = mockUsers.filter(user => user.status === 'suspended').length;
    
    const byRole = {
      SUPER_ADMIN: mockUsers.filter(user => user.role === 'SUPER_ADMIN').length,
      ADMIN: mockUsers.filter(user => user.role === 'ADMIN').length,
      USER: mockUsers.filter(user => user.role === 'USER').length,
    };

    return {
      total,
      active,
      inactive,
      suspended,
      byRole
    };
  },

  // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
  async exportUsersToCSV(): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const headers = [
      'ID',
      'Email',
      '–†–æ–ª—å',
      '–°—Ç–∞—Ç—É—Å',
      '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤',
      'IP –∞–¥—Ä–µ—Å',
      '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è'
    ];
    
    const rows = mockUsers.map(user => [
      user.id,
      user.email,
      user.role,
      user.status,
      new Date(user.createdAt).toLocaleDateString('ru-RU'),
      new Date(user.lastLogin).toLocaleDateString('ru-RU'),
      user.metadata.loginCount.toString(),
      user.metadata.ipAddress,
      user.permissions.join('; ')
    ]);
    
    const csvContent = [headers, ...rows]
      .map(row => row.map(field => `"${field}"`).join(','))
      .join('\n');
    
    return csvContent;
  },

  // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel (JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
  async exportUsersToExcel(): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    return mockUsers.map(user => ({
      'ID': user.id,
      'Email': user.email,
      '–†–æ–ª—å': user.role,
      '–°—Ç–∞—Ç—É—Å': user.status,
      '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(user.createdAt).toLocaleDateString('ru-RU'),
      '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥': new Date(user.lastLogin).toLocaleDateString('ru-RU'),
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤': user.metadata.loginCount,
      'IP –∞–¥—Ä–µ—Å': user.metadata.ipAddress,
      '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è': user.permissions.join(', ')
    }));
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserPassword(email: string, newPassword: string): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const userIndex = mockUsers.findIndex(user => user.email === email);
    if (userIndex === -1) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    mockUsers[userIndex].password = newPassword;
    saveUsersToStorage(mockUsers);
    
    console.log(`üîë –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
    console.log(`üîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}`);
    
    return true;
  },

  // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  resetMockData(): void {
    mockUsers = [...initialMockUsers];
    saveUsersToStorage(mockUsers);
    console.log('üîÑ Mock –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é');
  },

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  initializeData(): void {
    initializeClientData();
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
  async getUserStatsByRole(): Promise<Record<string, number>> {
    await new Promise(resolve => setTimeout(resolve, 200));
    initializeClientData();
    
    const stats: Record<string, number> = {
      SUPER_ADMIN: 0,
      ADMIN: 0,
      USER: 0
    };
    
    mockUsers.forEach(user => {
      if (stats.hasOwnProperty(user.role)) {
        stats[user.role]++;
      }
    });
    
    return stats;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserRole(userId: string, newRole: 'SUPER_ADMIN' | 'ADMIN' | 'USER'): Promise<User> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const userIndex = mockUsers.findIndex(user => user.id === userId);
    if (userIndex === -1) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const updatedUser = {
      ...mockUsers[userIndex],
      role: newRole,
      updatedAt: new Date().toISOString()
    };

    mockUsers[userIndex] = updatedUser;
    saveUsersToStorage(mockUsers);
    
    console.log('‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedUser.email, '–Ω–æ–≤–∞—è —Ä–æ–ª—å:', newRole);
    return updatedUser;
  }
};

