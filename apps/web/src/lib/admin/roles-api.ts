// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏

export interface Role {
  id: string;
  name: string;
  description: string;
  permissions: string[];
  userCount: number;
  isSystem: boolean;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  createdBy?: string;
  updatedBy?: string;
  metadata?: {
    color?: string;
    icon?: string;
    priority?: number;
  };
}

export interface Permission {
  id: string;
  name: string;
  description: string;
  category: string;
  resource: string;
  action: string;
  isSystem: boolean;
  dependencies?: string[];
}

export interface CreateRoleRequest {
  name: string;
  description: string;
  permissions: string[];
  metadata?: {
    color?: string;
    icon?: string;
    priority?: number;
  };
}

export interface UpdateRoleRequest {
  name?: string;
  description?: string;
  permissions?: string[];
  isActive?: boolean;
  metadata?: {
    color?: string;
    icon?: string;
    priority?: number;
  };
}

// –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏
const initialSystemRoles: Role[] = [
  {
    id: 'super_admin',
    name: 'SUPER_ADMIN',
    description: '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞',
    permissions: ['*'],
    userCount: 1,
    isSystem: true,
    isActive: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
    metadata: {
      color: '#dc2626',
      icon: 'Shield',
      priority: 1
    }
  },
  {
    id: 'admin',
    name: 'ADMIN',
    description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏',
    permissions: [
      'shipment:view', 'shipment:create', 'shipment:edit', 'shipment:delete',
      'user:view', 'user:create', 'user:edit',
      'partner:view', 'partner:create', 'partner:edit', 'partner:delete',
      'finance:view', 'finance:create', 'finance:edit',
      'audit:view', 'analytics:view'
    ],
    userCount: 2,
    isSystem: false, // –°–¥–µ–ª–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π
    isActive: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
    metadata: {
      color: '#2563eb',
      icon: 'Users',
      priority: 2
    }
  },
  {
    id: 'user',
    name: 'USER',
    description: '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏',
    permissions: [
      'shipment:view', 'request:create',
      'finance:pay'
    ],
    userCount: 5,
    isSystem: false, // –°–¥–µ–ª–∞–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π
    isActive: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-01T00:00:00Z',
    metadata: {
      color: '#16a34a',
      icon: 'User',
      priority: 3
    }
  }
];

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–æ–ª–∏
let customRoles: Role[] = [
  {
    id: 'manager',
    name: 'MANAGER',
    description: '–ú–µ–Ω–µ–¥–∂–µ—Ä —Å –ø—Ä–∞–≤–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏',
    permissions: [
      'shipment:view', 'shipment:create', 'shipment:edit',
      'user:view', 'partner:view', 'partner:create', 'partner:edit',
      'finance:view'
    ],
    userCount: 3,
    isSystem: false,
    isActive: true,
    createdAt: '2024-01-15T10:00:00Z',
    updatedAt: '2024-01-15T10:00:00Z',
    metadata: {
      color: '#7c3aed',
      icon: 'Settings',
      priority: 4
    }
  },
  {
    id: 'viewer',
    name: 'VIEWER',
    description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞',
    permissions: [
      'shipment:view', 'user:view', 'partner:view', 'finance:view'
    ],
    userCount: 1,
    isSystem: false,
    isActive: true,
    createdAt: '2024-01-20T14:30:00Z',
    updatedAt: '2024-01-20T14:30:00Z',
    metadata: {
      color: '#ea580c',
      icon: 'Eye',
      priority: 5
    }
  }
];

// –í—Å–µ —Ä–æ–ª–∏
let allRoles: Role[] = [...initialSystemRoles, ...customRoles];

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const loadRolesFromStorage = (): Role[] => {
  if (typeof window === 'undefined') return allRoles;
  
  try {
    const stored = localStorage.getItem('mockRoles');
    if (stored) {
      const parsed = JSON.parse(stored);
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–æ–ª–∏ –∏–∑ localStorage:', parsed.length);
      return parsed;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π –∏–∑ localStorage:', error);
  }
  
  return allRoles;
};

const saveRolesToStorage = (roles: Role[]): void => {
  if (typeof window === 'undefined') return;
  
  try {
    localStorage.setItem('mockRoles', JSON.stringify(roles));
    console.log('üíæ –†–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', roles.length);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ localStorage:', error);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
const initializeRolesData = () => {
  if (typeof window === 'undefined') return;
  
  const storedRoles = loadRolesFromStorage();
  if (storedRoles.length > 0) {
    allRoles = storedRoles;
  } else {
    saveRolesToStorage(allRoles);
  }
};

// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
export const allPermissions: Permission[] = [
  // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  { id: 'system:admin', name: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', description: '–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏', category: '–°–∏—Å—Ç–µ–º–∞', resource: 'admin_area', action: 'manage', isSystem: true },
  { id: 'system:users', name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', description: '–°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: '–°–∏—Å—Ç–µ–º–∞', resource: 'user', action: 'manage', isSystem: true },
  { id: 'system:roles', name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏', description: '–°–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π', category: '–°–∏—Å—Ç–µ–º–∞', resource: 'role', action: 'manage', isSystem: true },
  
  // –û—Ç–≥—Ä—É–∑–∫–∏
  { id: 'shipment:view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≥—Ä—É–∑–æ–∫', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–≥—Ä—É–∑–æ–∫', category: '–û—Ç–≥—Ä—É–∑–∫–∏', resource: 'shipment', action: 'view', isSystem: false },
  { id: 'shipment:create', name: '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ–∫', description: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–≥—Ä—É–∑–æ–∫', category: '–û—Ç–≥—Ä—É–∑–∫–∏', resource: 'shipment', action: 'create', isSystem: false },
  { id: 'shipment:edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ–∫', description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ç–≥—Ä—É–∑–æ–∫', category: '–û—Ç–≥—Ä—É–∑–∫–∏', resource: 'shipment', action: 'update', isSystem: false },
  { id: 'shipment:delete', name: '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ–∫', description: '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ–∫', category: '–û—Ç–≥—Ä—É–∑–∫–∏', resource: 'shipment', action: 'delete', isSystem: false },
  { id: 'shipment:transition', name: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≥—Ä—É–∑–æ–∫', category: '–û—Ç–≥—Ä—É–∑–∫–∏', resource: 'shipment', action: 'transition', isSystem: false },
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  { id: 'user:view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', resource: 'user', action: 'view', isSystem: false },
  { id: 'user:create', name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', description: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', resource: 'user', action: 'create', isSystem: false },
  { id: 'user:edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', resource: 'user', action: 'update', isSystem: false },
  { id: 'user:delete', name: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', description: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', category: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', resource: 'user', action: 'delete', isSystem: false },
  
  // –ü–∞—Ä—Ç–Ω–µ—Ä—ã
  { id: 'partner:view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', category: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', resource: 'partner', action: 'view', isSystem: false },
  { id: 'partner:create', name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', description: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', category: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', resource: 'partner', action: 'create', isSystem: false },
  { id: 'partner:edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', category: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', resource: 'partner', action: 'update', isSystem: false },
  { id: 'partner:delete', name: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', description: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', category: '–ü–∞—Ä—Ç–Ω–µ—Ä—ã', resource: 'partner', action: 'delete', isSystem: false },
  
  // –§–∏–Ω–∞–Ω—Å—ã
  { id: 'finance:view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', category: '–§–∏–Ω–∞–Ω—Å—ã', resource: 'finance', action: 'view', isSystem: false },
  { id: 'finance:create', name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π', description: '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π', category: '–§–∏–Ω–∞–Ω—Å—ã', resource: 'finance', action: 'create', isSystem: false },
  { id: 'finance:edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤', description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', category: '–§–∏–Ω–∞–Ω—Å—ã', resource: 'finance', action: 'update', isSystem: false },
  
  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∞—É–¥–∏—Ç
  { id: 'analytics:view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', description: '–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º', category: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', resource: 'analytics', action: 'view', isSystem: false },
  { id: 'audit:view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞', description: '–î–æ—Å—Ç—É–ø –∫ –∂—É—Ä–Ω–∞–ª–∞–º –∞—É–¥–∏—Ç–∞', category: '–ê—É–¥–∏—Ç', resource: 'audit', action: 'view', isSystem: false },
  
  // –§–∞–π–ª—ã
  { id: 'file:download', name: '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤', description: '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤', category: '–§–∞–π–ª—ã', resource: 'file', action: 'download', isSystem: false },
  { id: 'file:upload', name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤', description: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤', category: '–§–∞–π–ª—ã', resource: 'file', action: 'upload', isSystem: false },
  { id: 'file:delete', name: '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤', description: '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤', category: '–§–∞–π–ª—ã', resource: 'file', action: 'delete', isSystem: false },
  
  // –ó–∞–ø—Ä–æ—Å—ã
  { id: 'request:create', name: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤', description: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', category: '–ó–∞–ø—Ä–æ—Å—ã', resource: 'request', action: 'create', isSystem: false },
  { id: 'request:view', name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤', category: '–ó–∞–ø—Ä–æ—Å—ã', resource: 'request', action: 'view', isSystem: false },
  { id: 'request:edit', name: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤', description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤', category: '–ó–∞–ø—Ä–æ—Å—ã', resource: 'request', action: 'update', isSystem: false }
];

// API —Ñ—É–Ω–∫—Ü–∏–∏
export const rolesApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏
  async getRoles(): Promise<Role[]> {
    await new Promise(resolve => setTimeout(resolve, 300));
    initializeRolesData();
    return [...allRoles];
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ ID
  async getRole(id: string): Promise<Role | null> {
    await new Promise(resolve => setTimeout(resolve, 200));
    initializeRolesData();
    return allRoles.find(role => role.id === id) || null;
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
  async createRole(roleData: CreateRoleRequest): Promise<Role> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const newRole: Role = {
      id: `role_${Date.now()}`,
      name: roleData.name,
      description: roleData.description,
      permissions: roleData.permissions,
      userCount: 0,
      isSystem: false,
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      metadata: roleData.metadata
    };

    allRoles.push(newRole);
    saveRolesToStorage(allRoles);
    
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å:', newRole.name);
    return newRole;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å
  async updateRole(id: string, roleData: UpdateRoleRequest): Promise<Role> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const roleIndex = allRoles.findIndex(role => role.id === id);
    if (roleIndex === -1) {
      throw new Error('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const updatedRole = {
      ...allRoles[roleIndex],
      ...roleData,
      updatedAt: new Date().toISOString()
    };

    allRoles[roleIndex] = updatedRole;
    saveRolesToStorage(allRoles);
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å:', updatedRole.name);
    return updatedRole;
  },

  // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
  async deleteRole(id: string): Promise<void> {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const role = allRoles.find(r => r.id === id);
    if (!role) {
      throw new Error('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –¢–æ–ª—å–∫–æ SUPER_ADMIN –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å
    if (role.id === 'super_admin') {
      throw new Error('–†–æ–ª—å SUPER_ADMIN –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å');
    }

    if (role.userCount > 0) {
      throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
    }

    allRoles = allRoles.filter(r => r.id !== id);
    saveRolesToStorage(allRoles);
    
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ä–æ–ª—å:', role.name);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  async getPermissions(): Promise<Permission[]> {
    await new Promise(resolve => setTimeout(resolve, 200));
    return [...allPermissions];
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async getPermissionsByCategory(): Promise<Record<string, Permission[]>> {
    await new Promise(resolve => setTimeout(resolve, 200));
    
    const permissionsByCategory: Record<string, Permission[]> = {};
    allPermissions.forEach(permission => {
      if (!permissionsByCategory[permission.category]) {
        permissionsByCategory[permission.category] = [];
      }
      permissionsByCategory[permission.category].push(permission);
    });
    
    return permissionsByCategory;
  },

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å
  async isRoleInUse(id: string): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 200));
    const role = allRoles.find(r => r.id === id);
    return role ? role.userCount > 0 : false;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–ª–µ–π
  async getRolesStats(): Promise<{
    total: number;
    system: number;
    custom: number;
    active: number;
    inactive: number;
  }> {
    await new Promise(resolve => setTimeout(resolve, 200));
    initializeRolesData();
    
    return {
      total: allRoles.length,
      system: allRoles.filter(r => r.isSystem).length,
      custom: allRoles.filter(r => !r.isSystem).length,
      active: allRoles.filter(r => r.isActive).length,
      inactive: allRoles.filter(r => !r.isActive).length
    };
  },

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  initializeData(): void {
    initializeRolesData();
  }
};
