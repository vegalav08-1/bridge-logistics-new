const fs = require('fs');
const path = require('path');

console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ Search —Å–∏—Å—Ç–µ–º—ã...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–∏—Å–∫–∞
const searchFiles = [
  'src/lib/search/types.ts',
  'src/lib/search/api.ts',
  'src/lib/search/route.ts',
  'src/lib/search/tokenize.ts',
  'src/lib/search/useGlobalSearch.ts',
  'src/lib/search/audit.ts',
  'src/lib/scanner/camera.ts',
  'src/lib/scanner/barcode.ts',
  'src/lib/scanner/ocr.ts',
  'src/lib/scanner/sheet.tsx',
  'src/app/search/page.tsx',
  'src/app/search/components/SearchBox.tsx',
  'src/app/search/components/ResultCard.tsx',
  'src/app/search/components/SearchResults.tsx',
  'src/components/header/GlobalSearchButton.tsx',
  'src/components/header/ScannerButton.tsx',
  'src/components/forms/OcrSuggestBar.tsx',
  'src/app/api/audit/ui/search/route.ts',
  'src/app/api/audit/ui/scan/route.ts',
  'src/app/api/audit/ui/ocr/route.ts'
];

let allFilesExist = true;
searchFiles.forEach(file => {
  const filePath = path.join(__dirname, file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    allFilesExist = false;
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏—á–µ-—Ñ–ª–∞–≥–∏
const flagsPath = path.join(__dirname, 'src/lib/flags.ts');
if (fs.existsSync(flagsPath)) {
  const flagsContent = fs.readFileSync(flagsPath, 'utf8');
  
  const checks = [
    { name: 'SEARCH_V2_ENABLED —Ñ–ª–∞–≥', pattern: /SEARCH_V2_ENABLED.*=.*true/ },
    { name: 'SCANNER_V2_ENABLED —Ñ–ª–∞–≥', pattern: /SCANNER_V2_ENABLED.*=.*true/ },
    { name: 'OCR_V2_ENABLED —Ñ–ª–∞–≥', pattern: /OCR_V2_ENABLED.*=.*true/ },
  ];

  console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—á–µ-—Ñ–ª–∞–≥–æ–≤:');
  checks.forEach(check => {
    if (check.pattern.test(flagsContent)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ùå ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù`);
      allFilesExist = false;
    }
  });
} else {
  console.log('‚ùå flags.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ AppHeader
const appHeaderPath = path.join(__dirname, 'src/components/layout/AppHeader.tsx');
if (fs.existsSync(appHeaderPath)) {
  const content = fs.readFileSync(appHeaderPath, 'utf8');

  const checks = [
    { name: 'SEARCH_V2_ENABLED –∏–º–ø–æ—Ä—Ç', pattern: /SEARCH_V2_ENABLED/ },
    { name: 'SCANNER_V2_ENABLED –∏–º–ø–æ—Ä—Ç', pattern: /SCANNER_V2_ENABLED/ },
    { name: 'GlobalSearchButton –∏–º–ø–æ—Ä—Ç', pattern: /import.*GlobalSearchButton/ },
    { name: 'ScannerButton –∏–º–ø–æ—Ä—Ç', pattern: /import.*ScannerButton/ },
    { name: 'GlobalSearchButton –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', pattern: /SEARCH_V2_ENABLED.*GlobalSearchButton/ },
    { name: 'ScannerButton –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', pattern: /SCANNER_V2_ENABLED.*ScannerButton/ },
  ];

  console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ AppHeader:');
  checks.forEach(check => {
    if (check.pattern.test(content)) {
      console.log(`‚úÖ ${check.name}`);
    } else {
      console.log(`‚ùå ${check.name} - –ù–ï –ù–ê–ô–î–ï–ù`);
      allFilesExist = false;
    }
  });
} else {
  console.log('‚ùå AppHeader.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
  allFilesExist = false;
}

if (allFilesExist) {
  console.log('\n‚ú® Search —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó S12!');
  console.log('üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
  console.log('  ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º');
  console.log('  ‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä QR/—à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤');
  console.log('  ‚Ä¢ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π OCR –¥–ª—è —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö');
  console.log('  ‚Ä¢ Deep-link –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
  console.log('  ‚Ä¢ ACL –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è');
  console.log('  ‚Ä¢ –ê—É–¥–∏—Ç –∏ –Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å');
} else {
  console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Search —Å–∏—Å—Ç–µ–º—ã.');
}


