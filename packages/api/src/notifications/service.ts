import { prisma } from '@yp/db';
import { FLAGS } from '@yp/shared';
import { getNotificationWebSocket } from './websocket';

export interface CreateNotificationData {
  userId: string;
  type: string;
  title: string;
  body?: string;
  data?: any;
  chatId?: string;
  messageId?: string;
}

export interface NotificationSettings {
  pushEnabled: boolean;
  emailEnabled: boolean;
  quietHoursFrom?: number;
  quietHoursTo?: number;
  preferredLang?: string;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function createNotification(data: CreateNotificationData): Promise<void> {
  if (!FLAGS.NOTIFICATIONS_V2_ENABLED) {
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSettings = await prisma.userSettings.findUnique({
      where: { userId: data.userId }
    });

    // –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –Ω–µ —Å–æ–∑–¥–∞–µ–º
    if (userSettings && !userSettings.pushEnabled && !userSettings.emailEnabled) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    if (userSettings && userSettings.quietHoursFrom !== null && userSettings.quietHoursTo !== null) {
      const now = new Date();
      const currentHour = now.getHours();
      const from = userSettings.quietHoursFrom;
      const to = userSettings.quietHoursTo;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö
      if (from !== null && to !== null) {
        if (from <= to) {
          // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 22:00 - 08:00
          if (currentHour >= from || currentHour < to) {
            return;
          }
        } else {
          // –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 22:00 - 08:00
          if (currentHour >= from || currentHour < to) {
            return;
          }
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = await prisma.notification.create({
      data: {
        userId: data.userId,
        type: data.type,
        title: data.title,
        body: data.body,
        data: data.data ? JSON.stringify(data.data) : null,
        chatId: data.chatId,
        messageId: data.messageId
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    const wsService = getNotificationWebSocket();
    if (wsService) {
      wsService.sendNotificationToUser(data.userId, {
        id: notification.id,
        type: notification.type,
        title: notification.title,
        body: notification.body || undefined,
        data: data.data,
        isRead: notification.isRead,
        createdAt: notification.createdAt.toISOString(),
        chatId: notification.chatId || undefined,
        messageId: notification.messageId || undefined
      });
    }

    console.log(`Notification created for user ${data.userId}: ${data.title}`);
  } catch (error) {
    console.error('Error creating notification:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞)
 */
export async function createChatNotifications(
  chatId: string,
  authorId: string,
  type: string,
  title: string,
  body?: string,
  data?: any,
  messageId?: string
): Promise<void> {
  if (!FLAGS.NOTIFICATIONS_V2_ENABLED) {
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    const chatMembers = await prisma.chatMember.findMany({
      where: { chatId },
      include: {
        user: {
          select: { id: true, email: true }
        }
      }
    });

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞
    const notifications = chatMembers
      .filter(member => member.userId !== authorId)
      .map(member => createNotification({
        userId: member.userId,
        type,
        title,
        body,
        data,
        chatId,
        messageId
      }));

    await Promise.all(notifications);
  } catch (error) {
    console.error('Error creating chat notifications:', error);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
 */
export async function createMessageNotification(
  chatId: string,
  authorId: string,
  messageId: string,
  messageKind: string,
  messagePayload: any
): Promise<void> {
  if (!FLAGS.NOTIFICATIONS_V2_ENABLED) {
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    const chat = await prisma.chat.findUnique({
      where: { id: chatId },
      include: {
        request: {
          include: {
            createdBy: { select: { email: true } }
          }
        },
        shipment: {
          include: {
            createdBy: { select: { email: true } }
          }
        }
      }
    });

    if (!chat) return;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    let title = '';
    let body = '';

    if (chat.type === 'REQUEST') {
      title = `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–µ #${chat.number}`;
    } else if (chat.type === 'SHIPMENT') {
      title = `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≥—Ä—É–∑–∫–µ #${chat.number}`;
    } else {
      title = `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ #${chat.number}`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (messageKind === 'text' && messagePayload?.text) {
      body = messagePayload.text;
    } else if (messageKind === 'file') {
      body = 'üìé –§–∞–π–ª';
    } else if (messageKind === 'image') {
      body = 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    } else if (messageKind === 'video') {
      body = 'üé• –í–∏–¥–µ–æ';
    } else if (messageKind === 'system') {
      body = 'üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
    } else {
      body = '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    await createChatNotifications(
      chatId,
      authorId,
      'chat_message',
      title,
      body,
      { messageKind, messagePayload },
      messageId
    );
  } catch (error) {
    console.error('Error creating message notification:', error);
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
 */
export async function createStatusChangeNotification(
  chatId: string,
  userId: string,
  oldStatus: string,
  newStatus: string,
  shipmentNumber: string
): Promise<void> {
  if (!FLAGS.NOTIFICATIONS_V2_ENABLED) {
    return;
  }

  await createNotification({
    userId,
    type: 'status_change',
    title: `–°—Ç–∞—Ç—É—Å –æ—Ç–≥—Ä—É–∑–∫–∏ #${shipmentNumber} –∏–∑–º–µ–Ω–µ–Ω`,
    body: `${oldStatus} ‚Üí ${newStatus}`,
    data: { oldStatus, newStatus, shipmentNumber },
    chatId
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ñ—Ñ–µ—Ä–µ
 */
export async function createOfferNotification(
  chatId: string,
  userId: string,
  offerId: string,
  requestNumber: string
): Promise<void> {
  if (!FLAGS.NOTIFICATIONS_V2_ENABLED) {
    return;
  }

  await createNotification({
    userId,
    type: 'offer_created',
    title: `–ù–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É #${requestNumber}`,
    body: '–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ñ—Ñ–µ—Ä –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
    data: { offerId, requestNumber },
    chatId
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export async function createFinanceNotification(
  chatId: string,
  userId: string,
  operationType: string,
  amount: number,
  currency: string = 'USD'
): Promise<void> {
  if (!FLAGS.NOTIFICATIONS_V2_ENABLED) {
    return;
  }

  await createNotification({
    userId,
    type: 'finance_op',
    title: `–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${operationType}`,
    body: `${amount} ${currency}`,
    data: { operationType, amount, currency },
    chatId
  });
}
